{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/model/auth.service.ts","webpack:///./src/app/model/cart.model.ts","webpack:///./src/app/model/model.module.ts","webpack:///./src/app/model/order.model.ts","webpack:///./src/app/model/order.repository.ts","webpack:///./src/app/model/product.model.ts","webpack:///./src/app/model/product.repository.ts","webpack:///./src/app/model/rest.datasource.ts","webpack:///./src/app/model/static.datasource.ts","webpack:///./src/app/store/cartDetail.component.html","webpack:///./src/app/store/cartDetail.component.ts","webpack:///./src/app/store/cartSummary.component.html","webpack:///./src/app/store/cartSummary.component.ts","webpack:///./src/app/store/checkout.component.css","webpack:///./src/app/store/checkout.component.html","webpack:///./src/app/store/checkout.component.ts","webpack:///./src/app/store/counter.directive.ts","webpack:///./src/app/store/store.component.html","webpack:///./src/app/store/store.component.ts","webpack:///./src/app/store/store.module.ts","webpack:///./src/app/storeFirst.guard.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./admin/admin.module\": [\n\t\t\"./src/app/admin/admin.module.ts\",\n\t\t\"admin-admin-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app',\n  // templateUrl: './app.component.html',\n  template: '<router-outlet></router-outlet>'//'<store></store>'\n})\nexport class AppComponent {\n // title = 'SportsStore';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from \"@angular/router\";\n\nimport { AppComponent } from './app.component';\nimport { StoreModule } from './store/store.module';\nimport { StoreComponent } from './store/store.component';\nimport { CartDetailComponent } from './store/cartDetail.component';\nimport { CheckoutComponent } from './store/checkout.component';\nimport { StoreFirstGuard } from './storeFirst.guard';\n\nlet routing = RouterModule.forRoot([\n  {\n    path: \"store\", component: StoreComponent,\n    canActivate: [StoreFirstGuard]\n  },\n  {\n    path: \"cart\", component: CartDetailComponent,\n    canActivate: [StoreFirstGuard]\n  },\n  {\n    path: \"checkout\", component: CheckoutComponent,\n    canActivate: [StoreFirstGuard]\n  },\n  {\n    path: \"admin\",\n    loadChildren: \"./admin/admin.module#AdminModule\",\n    canActivate: [StoreFirstGuard]\n  },\n  { path: \"**\", redirectTo: \"/store\" }\n]);\n\n@NgModule({\n  imports: [BrowserModule, StoreModule, routing],\n  declarations: [AppComponent],\n  providers: [StoreFirstGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { RestDataSource } from \"./rest.datasource\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n    constructor(private datasource: RestDataSource) { }\r\n\r\n    authenticate(username: string, password: string): Observable<boolean> {\r\n        return this.datasource.authenticate(username, password);\r\n    }\r\n\r\n    get authenticated(): boolean {\r\n        return this.datasource.auth_token != null;\r\n    }\r\n    \r\n    clear() {\r\n        this.datasource.auth_token = null;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Product } from './product.model';\r\n\r\n@Injectable()\r\nexport class Cart {\r\n    public lines: CartLine[] = [];\r\n    public itemCount: number = 0;\r\n    public cartPrice: number = 0;\r\n\r\n    addLine(product: Product, quantity: number = 1) {\r\n        let line = this.lines.find(line => line.product.id == product.id);\r\n        if (line != undefined) {\r\n            line.quantity += quantity;\r\n        } else {\r\n            this.lines.push(new CartLine(product, quantity));\r\n        }\r\n        this.recalculate();\r\n    }\r\n\r\n    updateQuantity(product: Product, quantity: number) {\r\n        let line = this.lines.find(line => line.product.id == product.id);\r\n        if (line != undefined) {\r\n            line.quantity = Number(quantity);\r\n        }\r\n        this.recalculate();\r\n    }\r\n\r\n    removeLine(id: number) {\r\n        let index = this.lines.findIndex(line => line.product.id == id);\r\n        this.lines.splice(index, 1);\r\n        this.recalculate();\r\n    }\r\n\r\n    clear() {\r\n        this.lines = [];\r\n        this.itemCount = 0;\r\n        this.cartPrice = 0;\r\n    }\r\n    \r\n    private recalculate() {\r\n        this.itemCount = 0;\r\n        this.cartPrice = 0;\r\n        this.lines.forEach(l => {\r\n            this.itemCount += l.quantity;\r\n            this.cartPrice += (l.quantity * l.product.price);\r\n        })\r\n    }\r\n}\r\n\r\nexport class CartLine {\r\n    constructor(public product: Product, public quantity: number) { }\r\n\r\n    get lineTotal() {\r\n        return this.quantity * this.product.price;\r\n    }\r\n}","import { NgModule } from \"@angular/core\";\r\nimport { ProductRepository } from \"./product.repository\";\r\nimport { StaticDataSource } from \"./static.datasource\";\r\nimport { Cart } from './cart.model';\r\nimport { Order } from './order.model';\r\nimport { OrderRepository } from './order.repository';\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { RestDataSource } from './rest.datasource';\r\nimport { AuthService } from './auth.service';\r\n\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    providers: [ProductRepository, Cart, Order, OrderRepository,\r\n        { provide: StaticDataSource, useClass: RestDataSource },\r\n        RestDataSource, AuthService ]\r\n})\r\nexport class ModelModule { }","import { Injectable } from \"@angular/core\";\r\nimport { Cart } from \"./cart.model\";\r\n\r\n@Injectable()\r\nexport class Order {\r\n    public id: number;\r\n    public name: string;\r\n    public address: string;\r\n    public city: string;\r\n    public state: string;\r\n    public zip: string;\r\n    public country: string;\r\n    public shipped: boolean = false;\r\n    constructor(public cart: Cart) { }\r\n    clear() {\r\n        this.id = null;\r\n        this.name = this.address = this.city = null;\r\n        this.state = this.zip = this.country = null;\r\n        this.shipped = false;\r\n        this.cart.clear();\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Order } from \"./order.model\";\r\nimport { RestDataSource } from './rest.datasource';\r\n\r\n@Injectable()\r\nexport class OrderRepository {\r\n    private orders: Order[] = [];\r\n    private loaded: boolean = false;\r\n\r\n    constructor(private dataSource: RestDataSource) { }\r\n\r\n    loadOrders() {\r\n        this.loaded = true;\r\n        this.dataSource.getOrders()\r\n            .subscribe(orders => this.orders = orders);\r\n    }\r\n\r\n    getOrders(): Order[] {\r\n        if (!this.loaded) {\r\n            this.loadOrders();\r\n        }\r\n        return this.orders;\r\n    }\r\n\r\n    saveOrder(order: Order): Observable<Order> {\r\n        return this.dataSource.saveOrder(order);\r\n    }\r\n\r\n    updateOrder(order: Order) {\r\n        this.dataSource.updateOrder(order).subscribe(order => {\r\n            this.orders.splice(this.orders.\r\n                findIndex(o => o.id == order.id), 1, order);\r\n        });\r\n    }\r\n    \r\n    deleteOrder(id: number) {\r\n        this.dataSource.deleteOrder(id).subscribe(order => {\r\n            this.orders.splice(this.orders.findIndex(o => id == o.id));\r\n        });\r\n    }\r\n}","export class Product {\r\n    constructor(\r\n        public id?: number,\r\n        public name?: string,\r\n        public category?: string,\r\n        public description?: string,\r\n        public price?: number) { }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Product } from \"./product.model\";\r\nimport { RestDataSource } from './rest.datasource';\r\n\r\n@Injectable()\r\nexport class ProductRepository {\r\n\r\n    private products: Product[] = [];\r\n    private categories: string[] = [];\r\n    private errors = {};\r\n\r\n    constructor(private dataSource: RestDataSource) {\r\n        // this.loadData();\r\n    }\r\n\r\n    loadData() {\r\n        this.products = [];\r\n        this.categories = [];\r\n        this.dataSource.getProducts().subscribe(\r\n            data => {\r\n                this.products = data;\r\n                this.categories = data\r\n                    .map(p => p.category)\r\n                    .filter((c, index, array) => array.indexOf(c) == index).sort();\r\n            }, error => {\r\n                this.errors = error;\r\n            });\r\n    }\r\n\r\n    getProducts(category: string = null): Product[] {\r\n        return this.products\r\n            .filter(p => category == null || category == p.category);\r\n    }\r\n\r\n    getProduct(id: number): Product {\r\n        return this.products.find(p => p.id == id);\r\n    }\r\n\r\n    getCategories(): string[] {\r\n        return this.categories;\r\n    }\r\n\r\n    saveProduct(product: Product) {\r\n        if (product.id == null || product.id == 0) {\r\n            this.dataSource.saveProduct(product)\r\n                .subscribe(p => this.products.push(p));\r\n        } else {\r\n            this.dataSource.updateProduct(product)\r\n                .subscribe(p => {\r\n                    this.products.splice(this.products\r\n                        .findIndex(p => p.id == product.id), 1, product);\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteProduct(id: number) {\r\n        this.dataSource.deleteProduct(id).subscribe(p => {\r\n            this.products.splice(this.products\r\n                .findIndex(p => p.id == id), 1);\r\n        })\r\n    }\r\n}","import { Injectable, Inject } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Product } from \"./product.model\";\r\nimport { Cart } from \"./cart.model\";\r\nimport { Order } from \"./order.model\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\nconst PROTOCOL = \"http\";\r\nconst PORT = 5000;\r\n\r\n@Injectable()\r\nexport class RestDataSource {\r\n    //baseUrl: string;\r\n    public auth_token: string;\r\n    \r\n    constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n        //this.baseUrl = `${PROTOCOL}://${location.hostname}:${PORT}/`; //to work with json-server\r\n        //this.baseUrl = baseUrl;//for https\r\n       // console.log(this.baseUrl);\r\n    }\r\n\r\n    getProducts(): Observable<Product[]> {\r\n        return this.http.get<Product[]>(this.baseUrl + \"api/products\", this.getOptions());\r\n    }\r\n\r\n    saveProduct(product: Product): Observable<Product> {\r\n        return this.http.post<Product>(this.baseUrl + \"products\", product, this.getOptions());\r\n    }\r\n\r\n    updateProduct(product): Observable<Product> {\r\n        return this.http.put<Product>(`${this.baseUrl}products/${product.id}`, product, this.getOptions());\r\n    }\r\n\r\n    deleteProduct(id: number): Observable<Product> {\r\n        return this.http.delete<Product>(`${this.baseUrl}products/${id}`, this.getOptions());\r\n    }\r\n\r\n    getOrders(): Observable<Order[]> {\r\n        return this.http.get<Order[]>(this.baseUrl + \"orders\", this.getOptions());\r\n    }\r\n\r\n    saveOrder(order: Order): Observable<Order> {\r\n        return this.http.post<Order>(this.baseUrl + \"api/orders\", order);\r\n    }\r\n\r\n    deleteOrder(id: number): Observable<Order> {\r\n        return this.http.delete<Order>(`${this.baseUrl}orders/${id}`, this.getOptions());\r\n    }\r\n\r\n    updateOrder(order: Order): Observable<Order> {\r\n        return this.http.put<Order>(`${this.baseUrl}orders/${order.id}`, this.getOptions());\r\n    }\r\n\r\n    authenticate(user: string, pass: string): Observable<boolean> {\r\n        return this.http.post<any>(this.baseUrl + \"api/account/login\", {\r\n            username: user, password: pass\r\n        }).pipe(map(response => {\r\n            this.auth_token = response.success ? response.access_token : null;\r\n            return response.success;\r\n        }));\r\n    }\r\n\r\n    private getOptions() {\r\n        return {\r\n            headers: new HttpHeaders({\r\n                \"Authorization\": `Bearer ${this.auth_token}`\r\n            })\r\n        }\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Product } from \"./product.model\";\r\nimport { Observable, from } from \"rxjs\";\r\nimport { Order } from './order.model';\r\n\r\n@Injectable()\r\nexport class StaticDataSource {\r\n    private products: Product[] = [\r\n        new Product(1, \"Product 1\", \"Category 1\", \"Product 1 (Category 1)\", 100),\r\n        new Product(2, \"Product 2\", \"Category 1\", \"Product 2 (Category 1)\", 100),\r\n        new Product(3, \"Product 3\", \"Category 1\", \"Product 3 (Category 1)\", 100),\r\n        new Product(4, \"Product 4\", \"Category 1\", \"Product 4 (Category 1)\", 100),\r\n        new Product(5, \"Product 5\", \"Category 1\", \"Product 5 (Category 1)\", 100),\r\n        new Product(6, \"Product 6\", \"Category 2\", \"Product 6 (Category 2)\", 100),\r\n        new Product(7, \"Product 7\", \"Category 2\", \"Product 7 (Category 2)\", 100),\r\n        new Product(8, \"Product 8\", \"Category 2\", \"Product 8 (Category 2)\", 100),\r\n        new Product(9, \"Product 9\", \"Category 2\", \"Product 9 (Category 2)\", 100),\r\n        new Product(10, \"Product 10\", \"Category 2\", \"Product 10 (Category 2)\", 100),\r\n        new Product(11, \"Product 11\", \"Category 3\", \"Product 11 (Category 3)\", 100),\r\n        new Product(12, \"Product 12\", \"Category 3\", \"Product 12 (Category 3)\", 100),\r\n        new Product(13, \"Product 13\", \"Category 3\", \"Product 13 (Category 3)\", 100),\r\n        new Product(14, \"Product 14\", \"Category 3\", \"Product 14 (Category 3)\", 100),\r\n        new Product(15, \"Product 15\", \"Category 3\", \"Product 15 (Category 3)\", 100),\r\n    ];\r\n\r\n    getProducts(): Observable<Product[]> {\r\n        return from([this.products]);\r\n    }\r\n\r\n    saveOrder(order: Order): Observable<Order> {\r\n        console.log(JSON.stringify(order));\r\n        return from([order]);\r\n    }\r\n}","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col bg-dark text-white\\\">\\r\\n            <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col mt-2\\\">\\r\\n            <h2 class=\\\"text-center\\\">Your Cart</h2>\\r\\n            <table class=\\\"table table-bordered table-striped p-2\\\">\\r\\n                <thead>\\r\\n                    <tr>\\r\\n                        <th>Quantity</th>\\r\\n                        <th>Product</th>\\r\\n                        <th class=\\\"text-right\\\">Price</th>\\r\\n                        <th class=\\\"text-right\\\">Subtotal</th>\\r\\n                    </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                    <tr *ngIf=\\\"cart.lines.length == 0\\\">\\r\\n                        <td colspan=\\\"4\\\" class=\\\"text-center\\\">\\r\\n                            Your cart is empty\\r\\n                        </td>\\r\\n                    </tr>\\r\\n                    <tr *ngFor=\\\"let line of cart.lines\\\">\\r\\n                        <td>\\r\\n                            <input type=\\\"number\\\" class=\\\"form-control-sm\\\" style=\\\"width:5em\\\" [value]=\\\"line.quantity\\\"\\r\\n                                (change)=\\\"cart.updateQuantity(line.product, $event.target.value)\\\" />\\r\\n                        </td>\\r\\n                        <td>{{line.product.name}}</td>\\r\\n                        <td class=\\\"text-right\\\">\\r\\n                            {{line.product.price | currency:\\\"USD\\\":'symbol':\\\"2.2-2\\\"}}\\r\\n                        </td>\\r\\n                        <td class=\\\"text-right\\\">\\r\\n                            {{(line.lineTotal) | currency:\\\"USD\\\":'symbol':\\\"2.2-2\\\" }}\\r\\n                        </td>\\r\\n                        <td class=\\\"text-center\\\"><button class=\\\"btn btn-sm btn-danger\\\"\\r\\n                                (click)=\\\"cart.removeLine(line.product.id)\\\">\\r\\n                                Remove\\r\\n                            </button>\\r\\n                        </td>\\r\\n                    </tr>\\r\\n                </tbody>\\r\\n                <tfoot>\\r\\n                    <tr>\\r\\n                        <td colspan=\\\"3\\\" class=\\\"text-right\\\">Total:</td>\\r\\n                        <td class=\\\"text-right\\\">\\r\\n                            {{cart.cartPrice | currency:\\\"USD\\\":\\\"symbol\\\":\\\"2.2-2\\\"}}\\r\\n                        </td>\\r\\n                    </tr>\\r\\n                </tfoot>\\r\\n            </table>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n            <div class=\\\"text-center\\\">\\r\\n                <button class=\\\"btn btn-primary m-1\\\" routerLink=\\\"/store\\\">\\r\\n                    Continue Shopping\\r\\n                </button>\\r\\n                <button class=\\\"btn btn-secondary m-1\\\" routerLink=\\\"/checkout\\\" [disabled]=\\\"cart.lines.length == 0\\\">\\r\\n                    Checkout\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\"","import { Component } from \"@angular/core\";\r\nimport { Cart } from '../model/cart.model';\r\n\r\n@Component({\r\n    // template: `<div><h3 class=\"bg-info p-1 text-white\">Cart Detail Component</h3></div>`,\r\n    templateUrl: \"cartDetail.component.html\"\r\n})\r\nexport class CartDetailComponent {\r\n    constructor(public cart: Cart) { }\r\n}","module.exports = \"<div class=\\\"float-right\\\">\\r\\n    <small>\\r\\n        Your cart:\\r\\n        <span *ngIf=\\\"cart.itemCount > 0\\\">\\r\\n            {{ cart.itemCount }} item(s)\\r\\n            {{ cart.cartPrice | currency:\\\"USD\\\":\\\"symbol\\\":\\\"2.2-2\\\" }}\\r\\n        </span>\\r\\n        <span *ngIf=\\\"cart.itemCount == 0\\\">\\r\\n            (empty)\\r\\n        </span>\\r\\n    </small>\\r\\n    <button class=\\\"btn btn-sm bg-dark text-white\\\" [disabled]=\\\"cart.itemCount == 0\\\" routerLink=\\\"/cart\\\">\\r\\n        <i class=\\\"fa fa-shopping-cart\\\"></i>\\r\\n    </button>\\r\\n</div>\"","import { Component } from \"@angular/core\";\r\nimport { Cart } from \"../model/cart.model\";\r\n\r\n@Component({\r\n    selector: \"cart-summary\",\r\n    templateUrl: \"cartSummary.component.html\"\r\n})\r\nexport class CartSummaryComponent {\r\n    constructor(public cart: Cart) { }\r\n}","module.exports = \"input.ng-dirty.ng-invalid { border: 2px solid #ff0000 }\\r\\ninput.ng-dirty.ng-valid { border: 2px solid #6bc502 }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3RvcmUvY2hlY2tvdXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEIsMEJBQTBCO0FBQ3RELDBCQUEwQiwwQkFBMEIiLCJmaWxlIjoic3JjL2FwcC9zdG9yZS9jaGVja291dC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW5wdXQubmctZGlydHkubmctaW52YWxpZCB7IGJvcmRlcjogMnB4IHNvbGlkICNmZjAwMDAgfVxyXG5pbnB1dC5uZy1kaXJ0eS5uZy12YWxpZCB7IGJvcmRlcjogMnB4IHNvbGlkICM2YmM1MDIgfSJdfQ== */\"","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col bg-dark text-white\\\">\\r\\n            <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div *ngIf=\\\"orderSent\\\" class=\\\"m-2 text-center\\\">\\r\\n    <h2>Thanks!</h2>\\r\\n    <p>Thanks for placing your order.</p>\\r\\n    <p>We'll ship your goods as soon as possible.</p>\\r\\n    <button class=\\\"btn btn-primary\\\" routerLink=\\\"/store\\\">Return to Store</button>\\r\\n</div>\\r\\n<form *ngIf=\\\"!orderSent\\\" #form=\\\"ngForm\\\" novalidate (ngSubmit)=\\\"submitOrder(form)\\\" class=\\\"m-2\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Name</label>\\r\\n        <input class=\\\"form-control\\\" #name=\\\"ngModel\\\" name=\\\"name\\\" [(ngModel)]=\\\"order.name\\\" required />\\r\\n        <span *ngIf=\\\"submitted && name.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your name\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Address</label>\\r\\n        <input class=\\\"form-control\\\" #address=\\\"ngModel\\\" name=\\\"address\\\" [(ngModel)]=\\\"order.address\\\" required />\\r\\n        <span *ngIf=\\\"submitted && address.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your address\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>City</label>\\r\\n        <input class=\\\"form-control\\\" #city=\\\"ngModel\\\" name=\\\"city\\\" [(ngModel)]=\\\"order.city\\\" required />\\r\\n        <span *ngIf=\\\"submitted && city.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your city\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>State</label>\\r\\n        <input class=\\\"form-control\\\" #state=\\\"ngModel\\\" name=\\\"state\\\" [(ngModel)]=\\\"order.state\\\" required />\\r\\n        <span *ngIf=\\\"submitted && state.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your state\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Zip/Postal Code</label>\\r\\n        <input class=\\\"form-control\\\" #zip=\\\"ngModel\\\" name=\\\"zip\\\" [(ngModel)]=\\\"order.zip\\\" required />\\r\\n        <span *ngIf=\\\"submitted && zip.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your zip/postal code\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Country</label>\\r\\n        <input class=\\\"form-control\\\" #country=\\\"ngModel\\\" name=\\\"country\\\" [(ngModel)]=\\\"order.country\\\" required />\\r\\n        <span *ngIf=\\\"submitted && country.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your country\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"text-center\\\">\\r\\n        <button class=\\\"btn btn-secondary m-1\\\" routerLink=\\\"/cart\\\">Back</button>\\r\\n        <button class=\\\"btn btn-primary m-1\\\" type=\\\"submit\\\">Complete Order</button>\\r\\n    </div>\\r\\n</form>\"","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Order } from '../model/order.model';\r\nimport { OrderRepository } from '../model/order.repository';\r\n\r\n@Component({\r\n    // template: `<div><h3 class=\"bg-info p-1 text-white\">Checkout Component</h3></div>`\r\n    templateUrl: \"checkout.component.html\",\r\n    styleUrls: [\"checkout.component.css\"]\r\n})\r\nexport class CheckoutComponent {\r\n    orderSent: boolean = false;\r\n    submitted: boolean = false;\r\n\r\n    constructor(public repository: OrderRepository, public order: Order) { }\r\n\r\n    submitOrder(form: NgForm) {\r\n        this.submitted = true;\r\n        if (form.valid) {\r\n            this.repository.saveOrder(this.order).subscribe(order => {\r\n                //TODO: do something with order\r\n                this.order.clear();\r\n                this.orderSent = true;\r\n                this.submitted = false;\r\n            });\r\n        }\r\n    }\r\n}","import {\r\n    Directive, ViewContainerRef, TemplateRef, Input, Attribute, SimpleChanges\r\n} from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: \"[counterOf]\"\r\n})\r\nexport class CounterDirective {\r\n    constructor(private container: ViewContainerRef,\r\n        private template: TemplateRef<Object>) {\r\n    }\r\n    \r\n    @Input(\"counterOf\")\r\n    counter: number;\r\n    \r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.container.clear();\r\n        for (let i = 0; i < this.counter; i++) {\r\n            this.container.createEmbeddedView(this.template,\r\n                new CounterDirectiveContext(i + 1));\r\n        }\r\n    }\r\n}\r\nclass CounterDirectiveContext {\r\n    constructor(public $implicit: any) { }\r\n}","module.exports = \"<!-- <div class=\\\"navbar navbar-inverse bg-inverse\\\">\\r\\n    <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n</div>\\r\\n<div class=\\\"col-xs-3 bg-info p-1\\\">\\r\\n    {{categories.length}} Categories\\r\\n</div>\\r\\n<div class=\\\"col-xs-9 bg-success p-1\\\">\\r\\n    {{products.length}} Products\\r\\n</div> -->\\r\\n\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col bg-dark text-white\\\">\\r\\n            <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n            <cart-summary></cart-summary>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3 p-2\\\">\\r\\n            <button class=\\\"btn btn-block btn-outline-primary\\\" (click)=\\\"changeCategory()\\\">\\r\\n                Home\\r\\n            </button>\\r\\n            <button *ngFor=\\\"let cat of categories\\\" class=\\\"btn btn-outline-primary btn-block\\\"\\r\\n                [class.active]=\\\"cat == selectedCategory\\\" (click)=\\\"changeCategory(cat)\\\">\\r\\n                {{cat}}\\r\\n            </button>\\r\\n            <button class=\\\"btn btn-block btn-danger mt-3\\\" routerLink=\\\"/admin\\\">\\r\\n                Admin\\r\\n            </button>\\r\\n        </div>\\r\\n        <div class=\\\"col-9 p-2\\\">\\r\\n            <div *ngFor=\\\"let product of products\\\" class=\\\"card m-1 p-1 bg-light\\\">\\r\\n                <h4>\\r\\n                    {{product.name}}\\r\\n                    <span class=\\\"badge badge-pill badge-primary float-right\\\">\\r\\n                        {{ product.price | currency:\\\"USD\\\":\\\"symbol\\\":\\\"2.2-2\\\" }}\\r\\n                    </span>\\r\\n                </h4>\\r\\n                <div class=\\\"card-text bg-white p-1\\\">\\r\\n                    {{product.description}}\\r\\n                    <button class=\\\"btn btn-success btn-sm float-right\\\" (click)=\\\"addProductToCart(product)\\\">\\r\\n                        Add To Cart\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-inline float-left\\\">\\r\\n                <select class=\\\"form-control\\\" [value]=\\\"productsPerPage\\\" (change)=\\\"changePageSize($event.target.value)\\\">\\r\\n                    <option value=\\\"3\\\">3 per Page</option>\\r\\n                    <option value=\\\"4\\\">4 per Page</option>\\r\\n                    <option value=\\\"6\\\">6 per Page</option>\\r\\n                    <option value=\\\"8\\\">8 per Page</option>\\r\\n                </select>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group float-right\\\">\\r\\n                <button *counter=\\\"let page of pageCount\\\" (click)=\\\"changePage(page)\\\" class=\\\"btn btn-outline-primary\\\"\\r\\n                    [class.active]=\\\"page == selectedPage\\\">\\r\\n                    {{page}}\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component , OnInit} from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { Product } from \"../model/product.model\";\r\nimport { ProductRepository } from \"../model/product.repository\";\r\nimport { Cart } from '../model/cart.model';\r\n\r\n@Component({\r\n    selector: \"store\",\r\n    templateUrl: \"store.component.html\"\r\n})\r\nexport class StoreComponent implements OnInit {\r\n    public selectedCategory = null;\r\n    public productsPerPage = 4;\r\n    public selectedPage = 1;\r\n    // public valueType;\r\n\r\n    constructor(private repository: ProductRepository, private cart: Cart, private router: Router) { }\r\n\r\n    get products(): Product[] {\r\n        // console.log('produts getter called')        \r\n        let pageIndex = (this.selectedPage - 1) * this.productsPerPage\r\n        return this.repository.getProducts(this.selectedCategory)\r\n            .slice(pageIndex, pageIndex + this.productsPerPage);\r\n    }\r\n\r\n    get categories(): string[] {\r\n        return this.repository.getCategories();\r\n    }\r\n\r\n    changeCategory(newCategory?: string) {\r\n        this.selectedCategory = newCategory;\r\n    }\r\n\r\n    changePage(newPage: number) {\r\n        this.selectedPage = newPage;\r\n    }\r\n\r\n    changePageSize(newSize: number) {\r\n        //console.log('--------');// dosn't work\r\n        // this.valueType = Number(newSize);\r\n        // console.log(this.valueType);\r\n        this.productsPerPage = Number(newSize);\r\n        this.changePage(1);\r\n    }\r\n\r\n    // get pageNumbers(): number[] {\r\n    //     return Array(Math.ceil(this.repository\r\n    //         .getProducts(this.selectedCategory).length / this.productsPerPage))\r\n    //         .fill(0).map((x, i) => i + 1);\r\n    // }\r\n\r\n    get pageCount(): number {\r\n        return Math.ceil(this.repository\r\n            .getProducts(this.selectedCategory).length / this.productsPerPage);\r\n    }\r\n\r\n    addProductToCart(product: Product) {\r\n        this.cart.addLine(product);\r\n        this.router.navigateByUrl(\"/cart\");\r\n    }\r\n\r\n    ngOnInit() { \r\n        this.repository.loadData();\r\n    }\r\n}","import { NgModule } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\nimport { StoreComponent } from \"./store.component\";\r\nimport { ModelModule } from '../model/model.module';\r\nimport { CounterDirective } from './counter.directive';\r\nimport { CartSummaryComponent } from './cartSummary.component';\r\nimport { CartDetailComponent } from './cartDetail.component';\r\nimport { CheckoutComponent } from './checkout.component';\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\n@NgModule({\r\n    imports: [ModelModule, BrowserModule, FormsModule, RouterModule],\r\n    declarations: [StoreComponent, CounterDirective, CartSummaryComponent, CartDetailComponent, CheckoutComponent],\r\n    exports: [StoreComponent, CartDetailComponent, CheckoutComponent]\r\n})\r\nexport class StoreModule { }","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from \"@angular/router\";\r\nimport { StoreComponent } from \"./store/store.component\";\r\n\r\n@Injectable()\r\nexport class StoreFirstGuard {\r\n    private firstNavigation = true;\r\n\r\n    constructor(private router: Router) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        if (this.firstNavigation) {\r\n            this.firstNavigation = false;\r\n            if (route.component != StoreComponent) {\r\n                this.router.navigateByUrl(\"/\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nexport function getBaseUrl() {\n  //return document.getElementsByTagName('base')[0].href;\n  return `${window.location.hostname}:${window.location.port}/`;\n}\n\nconst providers = [\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\n];\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}