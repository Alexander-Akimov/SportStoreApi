{"version":3,"sources":["webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/admin/admin.module.ts","webpack:///./src/app/admin/auth.component.html","webpack:///./src/app/admin/auth.component.ts","webpack:///./src/app/admin/auth.guard.ts","webpack:///./src/app/admin/categoryEditor.component.html","webpack:///./src/app/admin/categoryEditor.component.ts","webpack:///./src/app/admin/categoryTable.component.html","webpack:///./src/app/admin/categoryTable.component.ts","webpack:///./src/app/admin/orderTable.component.ts","webpack:///./src/app/admin/productEditor.component.html","webpack:///./src/app/admin/productEditor.component.ts","webpack:///./src/app/admin/productTable.component.html","webpack:///./src/app/admin/productTable.component.ts","webpack:///./src/app/model/category.model.ts","webpack:///./src/app/model/product.model.ts"],"names":[],"mappings":"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","file":"admin-admin-module.js","sourcesContent":["module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col bg-info p-2 text-white\\\">\\r\\n            <a class=\\\"navbar-brand\\\">SPORTS STORE admin</a>\\r\\n        </div>\\r\\n        \\r\\n    </div>\\r\\n    <div class=\\\"row mt-2\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <button class=\\\"btn btn-outline-info btn-block\\\" routerLink=\\\"/admin/main/products\\\" routerLinkActive=\\\"active\\\">\\r\\n                Products\\r\\n            </button>\\r\\n            <button class=\\\"btn btn-outline-info btn-block\\\" routerLink=\\\"/admin/main/orders\\\" routerLinkActive=\\\"active\\\">\\r\\n                Orders\\r\\n            </button>\\r\\n            <button class=\\\"btn btn-outline-info btn-block\\\" routerLink=\\\"/admin/main/categories\\\" routerLinkActive=\\\"active\\\">\\r\\n                Categories\\r\\n            </button>\\r\\n            <button class=\\\"btn btn-outline-danger btn-block\\\" (click)=\\\"logout()\\\">\\r\\n                Logout\\r\\n            </button>\\r\\n        </div>\\r\\n        <div class=\\\"col-9\\\">\\r\\n            <router-outlet></router-outlet>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from '../model/auth.service';\r\n\r\n@Component({\r\n    templateUrl: \"admin.component.html\"\r\n})\r\nexport class AdminComponent {\r\n    constructor(private router: Router, private auth: AuthService) { }\r\n\r\n    logout() {\r\n        this.auth.clear();\r\n        this.router.navigateByUrl(\"/\");\r\n    }\r\n}","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { AuthComponent } from \"./auth.component\";\r\nimport { AdminComponent } from \"./admin.component\";\r\nimport { AuthGuard } from './auth.guard';\r\nimport { ModelModule } from '../model/model.module';\r\nimport { ProductEditorComponent } from './productEditor.component';\r\nimport { ProductTableComponent } from './productTable.component';\r\nimport { OrderTableComponent } from './orderTable.component';\r\nimport { CategoryTableComponent } from './categoryTable.component';\r\nimport { CategoryEditorComponent } from './categoryEditor.component';\r\n\r\nlet routing = RouterModule.forChild([\r\n    { path: \"auth\", component: AuthComponent },\r\n    {\r\n        path: \"main\", component: AdminComponent, canActivate: [AuthGuard],\r\n        children: [\r\n            { path: \"products/:mode/:id\", component: ProductEditorComponent },\r\n            { path: \"products/:mode\", component: ProductEditorComponent },\r\n            { path: \"products\", component: ProductTableComponent },\r\n            { path: \"categories/:mode/:id\", component: CategoryEditorComponent },\r\n            { path: \"categories/:mode\", component: CategoryEditorComponent },\r\n            { path: \"categories\", component: CategoryTableComponent },\r\n            { path: \"orders\", component: OrderTableComponent },\r\n            { path: \"**\", redirectTo: \"products\" }\r\n        ]\r\n    },\r\n    { path: \"**\", redirectTo: \"auth\" }\r\n]);\r\n\r\n@NgModule({\r\n    imports: [ModelModule, CommonModule, FormsModule, routing],\r\n    providers: [AuthGuard],\r\n    declarations: [AuthComponent, AdminComponent,\r\n        ProductTableComponent, ProductEditorComponent, \r\n        CategoryTableComponent, CategoryEditorComponent,\r\n        OrderTableComponent]\r\n})\r\nexport class AdminModule { }","module.exports = \"<div class=\\\"bg-info p-2 text-center text-white\\\">\\r\\n    <h3>SportsStore Admin</h3>\\r\\n</div>\\r\\n<div class=\\\"bg-danger mt-2 p-2 text-center text-white\\\" *ngIf=\\\"errorMessage != null\\\">\\r\\n    {{errorMessage}}\\r\\n</div>\\r\\n<div class=\\\"p-2\\\">\\r\\n    <form novalidate #form=\\\"ngForm\\\" (ngSubmit)=\\\"authenticate(form)\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label>Name</label>\\r\\n            <input class=\\\"form-control\\\" name=\\\"username\\\" [(ngModel)]=\\\"username\\\" required />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label>Password</label>\\r\\n            <input class=\\\"form-control\\\" type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\" required />\\r\\n        </div>\\r\\n        <div class=\\\"text-center\\\">\\r\\n            <button class=\\\"btn btn-secondary m-1\\\" routerLink=\\\"/\\\" type=\\\"button\\\">Go back</button>\\r\\n            <button class=\\\"btn btn-primary m-1\\\" type=\\\"submit\\\">Log In</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</div>\"","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from '../model/auth.service';\r\n\r\n@Component({\r\n    templateUrl: \"auth.component.html\"\r\n})\r\nexport class AuthComponent {\r\n    public username: string;\r\n    public password: string;\r\n    public errorMessage: string;\r\n\r\n    constructor(private router: Router, private auth: AuthService) { }\r\n\r\n    authenticate(form: NgForm) {\r\n        if (form.valid) {\r\n            this.auth.authenticate(this.username, this.password)// perform authentication\r\n                .subscribe(response => {\r\n                    if (response) {\r\n                        this.router.navigateByUrl(\"/admin/main\");\r\n                    }\r\n                    this.errorMessage = \"Authentication Failed\";\r\n                },\r\n                    error => {\r\n                        this.errorMessage = error.message;\r\n                    });\r\n            // this.router.navigateByUrl(\"/admin/main\");\r\n        } else {\r\n            this.errorMessage = \"Form Data Invalid\";\r\n        }\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from \"@angular/router\";\r\nimport { AuthService } from \"../model/auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuard {\r\n    constructor(private router: Router, private auth: AuthService) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        if (!this.auth.authenticated) {\r\n            this.router.navigateByUrl(\"/admin/auth\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}","module.exports = \"<div class=\\\"bg-primary p-2 text-white\\\" [class.bg-warning]=\\\"editing\\\" [class.text-dark]=\\\"editing\\\">\\r\\n    <h5>{{editing ? \\\"Edit\\\" : \\\"Create\\\"}} Category</h5>\\r\\n</div>\\r\\n\\r\\n<form novalidate #form=\\\"ngForm\\\" (ngSubmit)=\\\"save(form)\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Name</label>\\r\\n        <input class=\\\"form-control\\\" #name=\\\"ngModel\\\" name=\\\"name\\\" [(ngModel)]=\\\"category.name\\\" required />\\r\\n        <span *ngIf=\\\"submitted && name.invalid \\\" class=\\\"text-danger\\\">\\r\\n            Please enter Category name\\r\\n        </span>\\r\\n    </div>   \\r\\n    \\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Description</label>\\r\\n        <textarea class=\\\"form-control\\\" #description=\\\"ngModel\\\" name=\\\"description\\\" [(ngModel)]=\\\"category.description\\\" required>\\r\\n        </textarea>\\r\\n        <span *ngIf=\\\"submitted && description.invalid \\\" class=\\\"text-danger\\\">\\r\\n            Please enter Product Description\\r\\n        </span>\\r\\n    </div>\\r\\n    \\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary mr-1\\\" [class.btn-warning]=\\\"editing\\\">\\r\\n        {{editing ? \\\"Save\\\" : \\\"Create\\\"}}\\r\\n    </button>\\r\\n    <button type=\\\"reset\\\" class=\\\"btn btn-secondary\\\" routerLink=\\\"/admin/main/categories\\\">\\r\\n        Cancel\\r\\n    </button>\\r\\n</form>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { ProductRepository } from \"../model/product.repository\";\r\nimport Category from '../model/category.model';\r\n\r\n@Component({\r\n    templateUrl: \"categoryEditor.component.html\"\r\n})\r\n\r\nexport class CategoryEditorComponent implements OnInit {\r\n    \r\n    editing: boolean = false;\r\n    category: Category = new Category();\r\n    submitted: boolean = false;\r\n    private categoryId: string = \"\";\r\n\r\n    constructor(private repository: ProductRepository,\r\n        private router: Router,\r\n        activeRoute: ActivatedRoute) {\r\n\r\n        this.editing = activeRoute.snapshot.params[\"mode\"] == \"edit\";\r\n        this.categoryId = activeRoute.snapshot.params[\"id\"];      \r\n    }\r\n\r\n    save(form: NgForm) {\r\n        // console.log(this.product.categoryId);\r\n        this.submitted = true;\r\n        if (form.valid) {\r\n           // console.log(this.category);\r\n            this.repository.saveCategory(this.category);\r\n            this.router.navigateByUrl(\"/admin/main/categories\");\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.editing) {\r\n            Object.assign(this.category, this.repository.getCategory(this.categoryId));\r\n        }\r\n    }\r\n}","module.exports = \"<table class=\\\"table table-sm table-striped\\\">\\r\\n    <thead>\\r\\n        <tr>\\r\\n            <!-- <th>ID</th> -->\\r\\n            <th>Category Name</th>\\r\\n            <th>Description</th>\\r\\n            <th></th>\\r\\n        </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n        <tr *ngFor=\\\"let c of categories\\\">\\r\\n            <!-- <td>{{c.id}}</td> -->\\r\\n            <td>{{c.name}}</td>\\r\\n            <td>{{c.description}}</td>\\r\\n            <td>\\r\\n                <button class=\\\"btn btn-sm btn-warning mr-1\\\" [routerLink]=\\\"['/admin/main/categories/edit', c.id]\\\">\\r\\n                    Edit\\r\\n                </button>\\r\\n                <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"deleteCategory(c.id)\\\">\\r\\n                    Delete\\r\\n                </button>\\r\\n            </td>\\r\\n        </tr>\\r\\n    </tbody>\\r\\n</table>\\r\\n<button class=\\\"btn btn-primary\\\" routerLink=\\\"/admin/main/categories/create\\\">\\r\\n    Create New Category\\r\\n</button>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport Category from '../model/category.model';\r\nimport { ProductRepository } from '../model/product.repository';\r\n\r\n@Component({\r\n    templateUrl: \"categoryTable.component.html\"\r\n})\r\nexport class CategoryTableComponent implements OnInit {\r\n\r\n    constructor(private repository: ProductRepository) { }\r\n\r\n    deleteCategory(id: string) {\r\n        this.repository.deleteCategory(id);\r\n    }\r\n    \r\n    get categories(): Category[] {\r\n        return this.repository.getCategories();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.repository.loadData();\r\n    }\r\n}","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    template: `<div class=\"bg-primary p-2 text-white\">\r\n            <h3>Order Table Placeholder</h3>\r\n            </div>`\r\n})\r\nexport class OrderTableComponent { }","module.exports = \"<div class=\\\"bg-primary p-2 text-white\\\" [class.bg-warning]=\\\"editing\\\" [class.text-dark]=\\\"editing\\\">\\r\\n    <h5>{{editing ? \\\"Edit\\\" : \\\"Create\\\"}} Product</h5>\\r\\n</div>\\r\\n\\r\\n<form novalidate #form=\\\"ngForm\\\" (ngSubmit)=\\\"save(form)\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Name</label>\\r\\n        <input class=\\\"form-control\\\" #name=\\\"ngModel\\\" name=\\\"name\\\" [(ngModel)]=\\\"product.name\\\" required />\\r\\n        <span *ngIf=\\\"submitted && name.invalid \\\" class=\\\"text-danger\\\">\\r\\n            Please enter Product name\\r\\n        </span>\\r\\n    </div>\\r\\n    \\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Category</label>\\r\\n        <select class=\\\"form-control\\\" #categoryId=\\\"ngModel\\\" name=\\\"categoryId\\\" [(ngModel)]=\\\"product.categoryId\\\" required\\r\\n            (change)=\\\"changeCategory($event.target.value)\\\" >\\r\\n            <option *ngFor=\\\"let category of categories\\\" value={{category.id}}>\\r\\n                {{category.name}}\\r\\n            </option>\\r\\n        </select>\\r\\n        <span *ngIf=\\\"submitted && categoryId.invalid \\\" class=\\\"text-danger\\\">\\r\\n            Please select Product category\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Description</label>\\r\\n        <textarea class=\\\"form-control\\\" #description=\\\"ngModel\\\" name=\\\"description\\\" [(ngModel)]=\\\"product.description\\\" required>\\r\\n        </textarea>\\r\\n        <span *ngIf=\\\"submitted && description.invalid \\\" class=\\\"text-danger\\\">\\r\\n            Please enter Product Description\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Price</label>\\r\\n        <input class=\\\"form-control\\\" #price=\\\"ngModel\\\" name=\\\"price\\\" [(ngModel)]=\\\"product.price\\\" required />\\r\\n        <span *ngIf=\\\"submitted && price.invalid \\\" class=\\\"text-danger\\\">\\r\\n            Please enter Product Price\\r\\n        </span>\\r\\n    </div>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary mr-1\\\" [class.btn-warning]=\\\"editing\\\">\\r\\n        {{editing ? \\\"Save\\\" : \\\"Create\\\"}}\\r\\n    </button>\\r\\n    <button type=\\\"reset\\\" class=\\\"btn btn-secondary\\\" routerLink=\\\"/admin/main/products\\\">\\r\\n        Cancel\\r\\n    </button>\\r\\n</form>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport Product from \"../model/product.model\";\r\nimport { ProductRepository } from \"../model/product.repository\";\r\nimport Category from '../model/category.model';\r\n\r\n@Component({\r\n    templateUrl: \"productEditor.component.html\"\r\n})\r\nexport class ProductEditorComponent implements OnInit {\r\n\r\n    editing: boolean = false;\r\n    product: Product = new Product();\r\n    private productId: string = \"\";\r\n    public categories: Category[] = [];\r\n    submitted: boolean = false;\r\n\r\n    constructor(private repository: ProductRepository,\r\n        private router: Router,\r\n        activeRoute: ActivatedRoute) {\r\n\r\n        this.editing = activeRoute.snapshot.params[\"mode\"] == \"edit\";\r\n        this.productId = activeRoute.snapshot.params[\"id\"];\r\n    }\r\n\r\n    save(form: NgForm) {\r\n        // console.log(this.product.categoryId);\r\n        this.submitted = true;\r\n        if (form.valid) {\r\n            //console.log(this.product);\r\n            this.repository.saveProduct(this.product);\r\n            this.router.navigateByUrl(\"/admin/main/products\");\r\n        } else {\r\n            //this.submitted = false;\r\n        }\r\n    }\r\n\r\n    changeCategory(categoryId: string) { // for debug\r\n        console.log(categoryId);\r\n    }\r\n \r\n\r\n    ngOnInit(): void {\r\n        if (this.editing) {\r\n            Object.assign(this.product, this.repository.getProduct(this.productId));\r\n           // console.log(product);\r\n        }\r\n        this.categories = this.repository.getCategories();\r\n    }\r\n}","module.exports = \"<table class=\\\"table table-sm table-striped\\\">\\r\\n    <thead>\\r\\n        <tr>\\r\\n            <!-- <th>ID</th> -->\\r\\n            <th>Name</th>\\r\\n            <th>Category</th>\\r\\n            <th>Price</th>\\r\\n            <th></th>\\r\\n        </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n        <tr *ngFor=\\\"let p of products\\\">\\r\\n            <!-- <td>{{p.id}}</td> -->\\r\\n            <td>{{p.name}}</td>\\r\\n            <td>{{p.categoryName}}</td>\\r\\n            <td>{{p.price | currency:\\\"USD\\\":\\\"symbol\\\":\\\"2.2-2\\\"}}</td>\\r\\n            <td>\\r\\n                <button class=\\\"btn btn-sm btn-warning mr-1\\\" [routerLink]=\\\"['/admin/main/products/edit', p.id]\\\">\\r\\n                    Edit\\r\\n                </button>\\r\\n                <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"deleteProduct(p.id)\\\">\\r\\n                    Delete\\r\\n                </button>\\r\\n            </td>\\r\\n        </tr>\\r\\n    </tbody>\\r\\n</table>\\r\\n<button class=\\\"btn btn-primary\\\" routerLink=\\\"/admin/main/products/create\\\">\\r\\n    Create New Product\\r\\n</button>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport Product from \"../model/product.model\";\r\nimport { ProductRepository } from \"../model/product.repository\";\r\n\r\n@Component({\r\n    templateUrl: \"productTable.component.html\"\r\n})\r\nexport class ProductTableComponent implements OnInit {\r\n\r\n    constructor(private repository: ProductRepository) { }\r\n\r\n    get products(): Product[] {\r\n        return this.repository.getProducts();\r\n    }\r\n\r\n    deleteProduct(id: string) {\r\n        this.repository.deleteProduct(id);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.repository.loadData();\r\n    }\r\n}","\r\nexport default class Category {\r\n\r\n    constructor(\r\n        public id?: string,\r\n        public name?: string,\r\n        public description?: string) { }\r\n}","import Category from './category.model';\r\n\r\nexport default class Product {\r\n\r\n    constructor(\r\n        public id?: string,\r\n        public name?: string,\r\n        public description?: string,\r\n        public price?: number,\r\n        public categoryId?: string,\r\n        public categoryName?: string) {\r\n        // categoryId = category.id;\r\n        //console.log(\"constructor call: \" + this);\r\n    }\r\n}"],"sourceRoot":""}