{"version":3,"sources":["webpack:///./src/app/store/cartDetail.component.html","webpack:///./src/app/store/cartDetail.component.ts","webpack:///./src/app/store/cartSummary.component.html","webpack:///./src/app/store/cartSummary.component.ts","webpack:///./src/app/store/checkout.component.css","webpack:///./src/app/store/checkout.component.html","webpack:///./src/app/store/checkout.component.ts","webpack:///./src/app/store/counter.directive.ts","webpack:///./src/app/store/store.component.html","webpack:///./src/app/store/store.component.ts","webpack:///./src/app/store/store.module.ts","webpack:///./src/app/storeFirst.guard.ts"],"names":[],"mappings":"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","file":"store-store-module.js","sourcesContent":["module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col bg-dark text-white\\\">\\r\\n            <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col mt-2\\\">\\r\\n            <h2 class=\\\"text-center\\\">Your Cart</h2>\\r\\n            <table class=\\\"table table-bordered table-striped p-2\\\">\\r\\n                <thead>\\r\\n                    <tr>\\r\\n                        <th>Quantity</th>\\r\\n                        <th>Product</th>\\r\\n                        <th class=\\\"text-right\\\">Price</th>\\r\\n                        <th class=\\\"text-right\\\">Subtotal</th>\\r\\n                    </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                    <tr *ngIf=\\\"cart.lines.length == 0\\\">\\r\\n                        <td colspan=\\\"4\\\" class=\\\"text-center\\\">\\r\\n                            Your cart is empty\\r\\n                        </td>\\r\\n                    </tr>\\r\\n                    <tr *ngFor=\\\"let line of cart.lines\\\">\\r\\n                        <td>\\r\\n                            <input type=\\\"number\\\" class=\\\"form-control-sm\\\" style=\\\"width:5em\\\" [value]=\\\"line.quantity\\\"\\r\\n                                (change)=\\\"cart.updateQuantity(line.product, $event.target.value)\\\" />\\r\\n                        </td>\\r\\n                        <td>{{line.product.name}}</td>\\r\\n                        <td class=\\\"text-right\\\">\\r\\n                            {{line.product.price | currency:\\\"USD\\\":'symbol':\\\"2.2-2\\\"}}\\r\\n                        </td>\\r\\n                        <td class=\\\"text-right\\\">\\r\\n                            {{(line.lineTotal) | currency:\\\"USD\\\":'symbol':\\\"2.2-2\\\" }}\\r\\n                        </td>\\r\\n                        <td class=\\\"text-center\\\"><button class=\\\"btn btn-sm btn-danger\\\"\\r\\n                                (click)=\\\"cart.removeLine(line.product.id)\\\">\\r\\n                                Remove\\r\\n                            </button>\\r\\n                        </td>\\r\\n                    </tr>\\r\\n                </tbody>\\r\\n                <tfoot>\\r\\n                    <tr>\\r\\n                        <td colspan=\\\"3\\\" class=\\\"text-right\\\">Total:</td>\\r\\n                        <td class=\\\"text-right\\\">\\r\\n                            {{cart.cartPrice | currency:\\\"USD\\\":\\\"symbol\\\":\\\"2.2-2\\\"}}\\r\\n                        </td>\\r\\n                    </tr>\\r\\n                </tfoot>\\r\\n            </table>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n            <div class=\\\"text-center\\\">\\r\\n                <button class=\\\"btn btn-primary m-1\\\" routerLink=\\\"/store\\\">\\r\\n                    Continue Shopping\\r\\n                </button>\\r\\n                <button class=\\\"btn btn-secondary m-1\\\" routerLink=\\\"/store/checkout\\\" [disabled]=\\\"cart.lines.length == 0\\\">\\r\\n                    Checkout\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\"","import { Component } from \"@angular/core\";\r\nimport { Cart } from '../model/cart.model';\r\n\r\n@Component({\r\n    // template: `<div><h3 class=\"bg-info p-1 text-white\">Cart Detail Component</h3></div>`,\r\n    templateUrl: \"cartDetail.component.html\"\r\n})\r\nexport class CartDetailComponent {\r\n    constructor(public cart: Cart) { }\r\n}","module.exports = \"<div class=\\\"float-right\\\">\\r\\n    <small>\\r\\n        Your cart:\\r\\n        <span *ngIf=\\\"cart.itemCount > 0\\\">\\r\\n            {{ cart.itemCount }} item(s)\\r\\n            {{ cart.cartPrice | currency:\\\"USD\\\":\\\"symbol\\\":\\\"2.2-2\\\" }}\\r\\n        </span>\\r\\n        <span *ngIf=\\\"cart.itemCount == 0\\\">\\r\\n            (empty)\\r\\n        </span>\\r\\n    </small>\\r\\n    <button class=\\\"btn btn-sm bg-dark text-white\\\" [disabled]=\\\"cart.itemCount == 0\\\" routerLink=\\\"/store/cart\\\">\\r\\n        <i class=\\\"fa fa-shopping-cart\\\"></i>\\r\\n    </button>\\r\\n</div>\"","import { Component } from \"@angular/core\";\r\nimport { Cart } from \"../model/cart.model\";\r\n\r\n@Component({\r\n    selector: \"cart-summary\",\r\n    templateUrl: \"cartSummary.component.html\"\r\n})\r\nexport class CartSummaryComponent {\r\n    constructor(public cart: Cart) { }\r\n}","module.exports = \"input.ng-dirty.ng-invalid { border: 2px solid #ff0000 }\\r\\ninput.ng-dirty.ng-valid { border: 2px solid #6bc502 }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3RvcmUvY2hlY2tvdXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEIsMEJBQTBCO0FBQ3RELDBCQUEwQiwwQkFBMEIiLCJmaWxlIjoic3JjL2FwcC9zdG9yZS9jaGVja291dC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW5wdXQubmctZGlydHkubmctaW52YWxpZCB7IGJvcmRlcjogMnB4IHNvbGlkICNmZjAwMDAgfVxyXG5pbnB1dC5uZy1kaXJ0eS5uZy12YWxpZCB7IGJvcmRlcjogMnB4IHNvbGlkICM2YmM1MDIgfSJdfQ== */\"","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col bg-dark text-white\\\">\\r\\n            <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div *ngIf=\\\"orderSent\\\" class=\\\"m-2 text-center\\\">\\r\\n    <h2>Thanks!</h2>\\r\\n    <p>Thanks for placing your order.</p>\\r\\n    <p>We'll ship your goods as soon as possible.</p>\\r\\n    <button class=\\\"btn btn-primary\\\" routerLink=\\\"/store\\\">Return to Store</button>\\r\\n</div>\\r\\n<form *ngIf=\\\"!orderSent\\\" #form=\\\"ngForm\\\" novalidate (ngSubmit)=\\\"submitOrder(form)\\\" class=\\\"m-2\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Name</label>\\r\\n        <input class=\\\"form-control\\\" #name=\\\"ngModel\\\" name=\\\"name\\\" [(ngModel)]=\\\"order.name\\\" required />\\r\\n        <span *ngIf=\\\"submitted && name.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your name\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Address</label>\\r\\n        <input class=\\\"form-control\\\" #address=\\\"ngModel\\\" name=\\\"address\\\" [(ngModel)]=\\\"order.address\\\" required />\\r\\n        <span *ngIf=\\\"submitted && address.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your address\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>City</label>\\r\\n        <input class=\\\"form-control\\\" #city=\\\"ngModel\\\" name=\\\"city\\\" [(ngModel)]=\\\"order.city\\\" required />\\r\\n        <span *ngIf=\\\"submitted && city.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your city\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>State</label>\\r\\n        <input class=\\\"form-control\\\" #state=\\\"ngModel\\\" name=\\\"state\\\" [(ngModel)]=\\\"order.state\\\" required />\\r\\n        <span *ngIf=\\\"submitted && state.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your state\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Zip/Postal Code</label>\\r\\n        <input class=\\\"form-control\\\" #zip=\\\"ngModel\\\" name=\\\"zip\\\" [(ngModel)]=\\\"order.zip\\\" required />\\r\\n        <span *ngIf=\\\"submitted && zip.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your zip/postal code\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Country</label>\\r\\n        <input class=\\\"form-control\\\" #country=\\\"ngModel\\\" name=\\\"country\\\" [(ngModel)]=\\\"order.country\\\" required />\\r\\n        <span *ngIf=\\\"submitted && country.invalid\\\" class=\\\"text-danger\\\">\\r\\n            Please enter your country\\r\\n        </span>\\r\\n    </div>\\r\\n    <div class=\\\"text-center\\\">\\r\\n        <button class=\\\"btn btn-secondary m-1\\\" routerLink=\\\"/store/cart\\\" type=\\\"button\\\">Back</button>\\r\\n        <button class=\\\"btn btn-primary m-1\\\" type=\\\"submit\\\">Complete Order</button>\\r\\n    </div>\\r\\n</form>\"","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Order } from '../model/order.model';\r\nimport { OrderRepository } from '../model/order.repository';\r\n\r\n@Component({\r\n    // template: `<div><h3 class=\"bg-info p-1 text-white\">Checkout Component</h3></div>`\r\n    templateUrl: \"checkout.component.html\",\r\n    styleUrls: [\"checkout.component.css\"]\r\n})\r\nexport class CheckoutComponent {\r\n    orderSent: boolean = false;\r\n    submitted: boolean = false;\r\n\r\n    constructor(public repository: OrderRepository, public order: Order) { }\r\n\r\n    submitOrder(form: NgForm) {\r\n        this.submitted = true;\r\n        if (form.valid) {\r\n            this.repository.saveOrder(this.order).subscribe(order => {\r\n                //TODO: do something with order\r\n                this.order.clear();\r\n                this.orderSent = true;\r\n                this.submitted = false;\r\n            });\r\n        }\r\n    }\r\n}","import {\r\n    Directive, ViewContainerRef, TemplateRef, Input, Attribute, SimpleChanges\r\n} from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: \"[counterOf]\"\r\n})\r\nexport class CounterDirective {\r\n    constructor(private container: ViewContainerRef,\r\n        private template: TemplateRef<Object>) {\r\n    }\r\n    \r\n    @Input(\"counterOf\")\r\n    counter: number;\r\n    \r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.container.clear();\r\n        for (let i = 0; i < this.counter; i++) {\r\n            this.container.createEmbeddedView(this.template,\r\n                new CounterDirectiveContext(i + 1));\r\n        }\r\n    }\r\n}\r\nclass CounterDirectiveContext {\r\n    constructor(public $implicit: any) { }\r\n}","module.exports = \"<!-- <div class=\\\"navbar navbar-inverse bg-inverse\\\">\\r\\n    <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n</div>\\r\\n<div class=\\\"col-xs-3 bg-info p-1\\\">\\r\\n    {{categories.length}} Categories\\r\\n</div>\\r\\n<div class=\\\"col-xs-9 bg-success p-1\\\">\\r\\n    {{products.length}} Products\\r\\n</div> -->\\r\\n\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col bg-dark text-white\\\">\\r\\n            <a class=\\\"navbar-brand\\\">SPORTS STORE</a>\\r\\n            <cart-summary></cart-summary>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3 p-2\\\">\\r\\n            <button class=\\\"btn btn-block btn-outline-primary\\\" [class.active]=\\\"undefined == selectedCategoryId\\\"\\r\\n                (click)=\\\"changeCategory()\\\">\\r\\n                Home\\r\\n            </button>\\r\\n            <button *ngFor=\\\"let cat of categories\\\" class=\\\"btn btn-outline-primary btn-block\\\"\\r\\n                [class.active]=\\\"cat.id == selectedCategoryId\\\" (click)=\\\"changeCategory(cat.id)\\\">\\r\\n                {{cat.name}}\\r\\n            </button>\\r\\n            <button class=\\\"btn btn-block btn-danger mt-3\\\" routerLink=\\\"/admin\\\">\\r\\n                Admin\\r\\n            </button>\\r\\n        </div>\\r\\n        <div class=\\\"col-9 p-2\\\">\\r\\n            <div *ngFor=\\\"let product of products\\\" class=\\\"card m-1 p-1 bg-light\\\">\\r\\n                <h4>\\r\\n                    {{product.name}}\\r\\n                    <span class=\\\"badge badge-pill badge-primary float-right\\\">\\r\\n                        {{ product.price | currency:\\\"USD\\\":\\\"symbol\\\":\\\"2.2-2\\\" }}\\r\\n                    </span>\\r\\n                </h4>\\r\\n                <div class=\\\"card-text bg-white p-1\\\">\\r\\n                    {{product.description}}\\r\\n                    <button class=\\\"btn btn-success btn-sm float-right\\\" (click)=\\\"addProductToCart(product)\\\">\\r\\n                        Add To Cart\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-inline float-left\\\">\\r\\n                <select class=\\\"form-control\\\" [value]=\\\"productsPerPage\\\" (change)=\\\"changePageSize($event.target.value)\\\">\\r\\n                    <option value=\\\"3\\\">3 per Page</option>\\r\\n                    <option value=\\\"4\\\">4 per Page</option>\\r\\n                    <option value=\\\"6\\\">6 per Page</option>\\r\\n                    <option value=\\\"8\\\">8 per Page</option>\\r\\n                </select>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group float-right\\\">\\r\\n                <button *counter=\\\"let page of pageCount\\\" (click)=\\\"changePage(page)\\\" class=\\\"btn btn-outline-primary\\\"\\r\\n                    [class.active]=\\\"page == selectedPage\\\">\\r\\n                    {{page}}\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport Product from \"../model/product.model\";\r\nimport { ProductRepository } from \"../model/product.repository\";\r\nimport { Cart } from '../model/cart.model';\r\nimport Category from '../model/category.model';\r\n\r\n@Component({\r\n    selector: \"store\",\r\n    templateUrl: \"store.component.html\"\r\n})\r\nexport class StoreComponent implements OnInit {\r\n    public selectedCategoryId = null;\r\n    public productsPerPage = 4;\r\n    public selectedPage = 1;\r\n    // public valueType;\r\n\r\n    constructor(private repository: ProductRepository, private cart: Cart, private router: Router) { }\r\n\r\n    get products(): Product[] {\r\n        // console.log('produts getter called')        \r\n        let pageIndex = (this.selectedPage - 1) * this.productsPerPage\r\n        return this.repository.getProducts(this.selectedCategoryId)\r\n            .slice(pageIndex, pageIndex + this.productsPerPage);\r\n    }\r\n\r\n    get categories(): Category[] {\r\n        return this.repository.getCategories();\r\n    }\r\n\r\n    changeCategory(newCategoryId?: string) {\r\n        this.selectedCategoryId = newCategoryId;\r\n    }\r\n\r\n    changePage(newPage: number) {\r\n        this.selectedPage = newPage;\r\n    }\r\n\r\n    changePageSize(newSize: number) {\r\n        //console.log('--------');// dosn't work\r\n        // this.valueType = Number(newSize);\r\n        // console.log(this.valueType);\r\n        this.productsPerPage = Number(newSize);\r\n        this.changePage(1);\r\n    }\r\n\r\n    // get pageNumbers(): number[] {\r\n    //     return Array(Math.ceil(this.repository\r\n    //         .getProducts(this.selectedCategory).length / this.productsPerPage))\r\n    //         .fill(0).map((x, i) => i + 1);\r\n    // }\r\n\r\n    get pageCount(): number {\r\n        return Math.ceil(this.repository\r\n            .getProducts(this.selectedCategoryId).length / this.productsPerPage);\r\n    }\r\n\r\n    addProductToCart(product: Product) {\r\n        this.cart.addLine(product);\r\n        this.router.navigateByUrl(\"/store/cart\");\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.repository.loadData();\r\n    }\r\n}","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\nimport { StoreComponent } from \"./store.component\";\r\nimport { ModelModule } from '../model/model.module';\r\nimport { CounterDirective } from './counter.directive';\r\nimport { CartSummaryComponent } from './cartSummary.component';\r\nimport { CartDetailComponent } from './cartDetail.component';\r\nimport { CheckoutComponent } from './checkout.component';\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { StoreFirstGuard } from '../storeFirst.guard';\r\n\r\nlet routing = RouterModule.forChild([\r\n    { path: \"\", component: StoreComponent },\r\n    { path: \"cart\", component: CartDetailComponent},\r\n    { path: \"checkout\", component: CheckoutComponent},\r\n    { path: \"**\", redirectTo: \"\" }\r\n]);\r\n\r\n\r\n@NgModule({\r\n    imports: [ModelModule, FormsModule, CommonModule, RouterModule, routing],\r\n    declarations: [StoreComponent, CounterDirective, CartSummaryComponent, CartDetailComponent, CheckoutComponent],\r\n    providers: [StoreFirstGuard],\r\n    exports: [StoreComponent, CartDetailComponent, CheckoutComponent]\r\n})\r\nexport class StoreModule { }","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from \"@angular/router\";\r\nimport { StoreComponent } from \"./store/store.component\";\r\n\r\n@Injectable()\r\nexport class StoreFirstGuard {\r\n    private firstNavigation = true;\r\n\r\n    constructor(private router: Router) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        if (this.firstNavigation) {\r\n            this.firstNavigation = false;\r\n            if (route.component != StoreComponent) {\r\n                this.router.navigateByUrl(\"/store\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}"],"sourceRoot":""}